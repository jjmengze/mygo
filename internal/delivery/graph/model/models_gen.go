// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
}

type AddPostInput struct {
	Title   string  `json:"title"`
	Content *string `json:"content"`
}

// 貼文
type Post struct {
	// 識別碼
	ID string `json:"id"`
	// 作者
	Author *User `json:"author"`
	// 標題
	Title *string `json:"title"`
	// 內容
	Content *string `json:"content"`
	// 按讚者
	LikeGivers []*User `json:"likeGivers"`
	// 建立時間 (ISO 格式)
	CreatedAt *string `json:"createdAt"`
}

func (Post) IsNode() {}

// 使用者
type User struct {
	// 識別碼
	ID string `json:"id"`
	// 帳號 email
	Email string `json:"email"`
	// 名字
	Name *string `json:"name"`
	// 年齡
	Age *int `json:"age"`
	// 朋友們
	Friends []*User `json:"friends"`
	// 身高 (預設為 CENTIMETRE)
	Height *float64 `json:"height"`
	// 體重 (預設為 KILOGRAM)
	Weight *float64 `json:"weight"`
	// 貼文
	Posts []*Post `json:"posts"`
}

func (User) IsNode() {}

// 高度單位
type HeightUnit string

const (
	// 公尺
	HeightUnitMetre HeightUnit = "METRE"
	// 公分
	HeightUnitCentimetre HeightUnit = "CENTIMETRE"
	// 英尺 (1 英尺 = 30.48 公分)
	HeightUnitFoot HeightUnit = "FOOT"
)

var AllHeightUnit = []HeightUnit{
	HeightUnitMetre,
	HeightUnitCentimetre,
	HeightUnitFoot,
}

func (e HeightUnit) IsValid() bool {
	switch e {
	case HeightUnitMetre, HeightUnitCentimetre, HeightUnitFoot:
		return true
	}
	return false
}

func (e HeightUnit) String() string {
	return string(e)
}

func (e *HeightUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HeightUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HeightUnit", str)
	}
	return nil
}

func (e HeightUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// 重量單位
type WeightUnit string

const (
	// 公斤
	WeightUnitKilogram WeightUnit = "KILOGRAM"
	// 公克
	WeightUnitGram WeightUnit = "GRAM"
	// 磅 (1 磅 = 0.45359237 公斤)
	WeightUnitPound WeightUnit = "POUND"
)

var AllWeightUnit = []WeightUnit{
	WeightUnitKilogram,
	WeightUnitGram,
	WeightUnitPound,
}

func (e WeightUnit) IsValid() bool {
	switch e {
	case WeightUnitKilogram, WeightUnitGram, WeightUnitPound:
		return true
	}
	return false
}

func (e WeightUnit) String() string {
	return string(e)
}

func (e *WeightUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WeightUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WeightUnit", str)
	}
	return nil
}

func (e WeightUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
